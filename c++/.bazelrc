common --enable_platform_specific_config

build:unix --cxxopt='-std=c++14' --host_cxxopt='-std=c++14' --force_pic --verbose_failures
build:unix --cxxopt='-Wall' --host_cxxopt='-Wall'
build:unix --cxxopt='-Wextra' --host_cxxopt='-Wextra'
build:unix --cxxopt='-Wno-strict-aliasing' --host_cxxopt='-Wno-strict-aliasing'
build:unix --cxxopt='-Wno-sign-compare' --host_cxxopt='-Wno-sign-compare'
build:unix --cxxopt='-Wno-unused-parameter' --host_cxxopt='-Wno-unused-parameter'

build:linux --config=unix
build:macos --config=unix

# See https://bazel.build/configure/windows#symlink
startup --windows_enable_symlinks
# We use LLVM's MSVC-compatible compiler driver to compile our code on Windows
# under Bazel. MSVC is natively supported when using CMake builds.
build:windows --compiler=clang-cl

build:windows --cxxopt='/std:c++14' --host_cxxopt='/std:c++14' --verbose_failures
build:windows --cxxopt='/wo4503' --host_cxxopt='/wo4503'
# The `/std:c++14` argument is unused during boringssl compilation and we don't
# want a warning when compiling each file.
build:windows --cxxopt='-Wno-unused-command-line-argument' --host_cxxopt='-Wno-unused-command-line-argument'

# build with ssl, zlib and bazel by default
build --//src/kj:openssl=True --//src/kj:zlib=True --//src/kj:brotli=True --//src/kj:shared_ptr=True

build:no-omit-frame-pointer --copt="-fno-omit-frame-pointer"
build:no-omit-frame-pointer --copt="-mno-omit-leaf-frame-pointer"

# build:sanitizers-common --copt="-fsanitize-link-c++-runtime" --linkopt="-fsanitize-link-c++-runtime"
build:sanitizers-common --copt="-Og"
build:sanitizers-common --copt="-fno-optimize-sibling-calls"
build:sanitizers-common --copt="-g"
build:sanitizers-common --config=no-omit-frame-pointer

build:asan --config=sanitizers-common
build:asan --copt="-fsanitize=address" --linkopt="-fsanitize=address"
# <!-- build:asan --test_env=ASAN_OPTIONS=abort_on_error=true -->

