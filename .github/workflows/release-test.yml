name: Release Tests

on:
  pull_request:
    paths-ignore:
    - 'doc/**'

jobs:
  Linux:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # Run extended tests with old compilers only on assumption that new compilers probably
        # haven't broken in a way that quick-test won't catch.
        compiler: [g++-5, clang-5.0]
    steps:
      - uses: actions/checkout@v2
      - name: install dependencies
        run: |
            export DEBIAN_FRONTEND=noninteractive
            sudo apt-get update
            sudo apt-get install -y build-essential git zlib1g-dev cmake libssl-dev valgrind gcc-multilib g++-multilib ${{ matrix.compiler }}
      - name: super-test
        run: |
            ./super-test.sh ${{ matrix.compiler }}
  MacOS:
    runs-on: macos-latest
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - name: install dependencies
        run: |
            brew install autoconf automake libtool pkg-config
      - name: super-test
        run: |
            ./super-test.sh
  Cygwin:
    runs-on: windows-latest
    strategy:
      fail-fast: false
    steps:
      - run: git config --global core.autocrlf false
      - uses: actions/checkout@v2
      # TODO(someday): If we could cache the Cygwin installation we wouldn't have to spend three
      #     minutes installing it for every build. Unfortuntaley, actions/cache@v1 does not preserve
      #     DOS file attributes, which corrupts the Cygwin install. In particular, Cygwin marks
      #     symlinks with the "DOS SYSTEM" attribute. We could cache just the downloaded packages,
      #     but it turns out that only saves a couple seconds; most of the time is spend unpacking.
      - name: Install Cygwin
        run: |
          choco config get cacheLocation
          choco install --no-progress cygwin
      - name: Install Cygwin additional packages
        shell: cmd
        run: |
          C:\tools\cygwin\cygwinsetup.exe -qgnNdO -R C:/tools/cygwin -l C:/tools/cygwin/packages -s http://mirrors.kernel.org/sourceware/cygwin/ -P autoconf,automake,libtool,gcc,gcc-g++,binutils,libssl-devel,make,zlib-devel,pkg-config,cmake,xxd
      - name: Build and test
        shell: cmd
        run: |
          C:\tools\cygwin\bin\bash -lc 'export PATH=/usr/local/bin:/usr/bin:/bin; cd /cygdrive/d/a/capnproto/capnproto; ./super-test.sh'
  MinGW-Wine:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - name: install dependencies
        run: |
            export DEBIAN_FRONTEND=noninteractive
            dpkg --add-architecture i386
            apt-get update
            sudo apt-get install -y build-essential git cmake mingw-w64 wine-stable wine64 wine32 wine-binfmt
            sudo update-binfmts --import wine
      - name: 64-bit Build and Test
        run: |
            ./super-test.sh mingw x86_64-w64-mingw32
      - name: 32-bit Build and Test
        run: |
            ./super-test.sh mingw i686-w64-mingw32
  cmake-packaging:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - name: install dependencies
        run: |
            export DEBIAN_FRONTEND=noninteractive
            sudo apt-get install -y build-essential git cmake
      - name: autotools-shared
        run: |
            ./super-test.sh cmake-package autotools-shared
      - name: autotools-static
        run: |
            ./super-test.sh cmake-package autotools-static
      - name: cmake-shared
        run: |
            ./super-test.sh cmake-package cmake-shared
      - name: cmake-static
        run: |
            ./super-test.sh cmake-package cmake-static
  Android:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - name: install dependencies
        run: |
            export DEBIAN_FRONTEND=noninteractive
            sudo apt-get install -y build-essential git
      - name: cache Android SDK
        id: cache-android-sdk
        uses: actions/cache@v1
        with:
          path: android-sdk
          key: android-sdk-25
      - name: fetch Android tools
        if: steps.cache-android-sdk.outputs.cache-hit != 'true'
        run: |
            mkdir android-sdk
            cd android-sdk
            curl -o commandlinetools.zip https://dl.google.com/android/repository/commandlinetools-linux-6200805_latest.zip
            unzip commandlinetools.zip
            yes | tools/bin/sdkmanager --sdk_root=$PWD platform-tools 'platforms;android-25' 'system-images;android-25;google_apis;armeabi-v7a' emulator 'build-tools;25.0.2' ndk-bundle
      - name: 32-bit Build and Test
        run: |
            echo | android-sdk/tools/bin/avdmanager create avd -n capnp -k 'system-images;android-25;google_apis;armeabi-v7a' -b google_apis/armeabi-v7a
            ./super-test.sh android $PWD/android-sdk arm-linux-androideabi armv7a-linux-androideabi24
